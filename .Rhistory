X_test.scaled <- scale(x = X_test,
center = attr(X_train.scaled, "scaled:center"),
scale = attr(X_train.scaled, "scaled:scale"))
dim(X_train.scaled)
X_train.scaled <- scale(x = X_train)
X_test.scaled <- scale(x = X_test,
center = attr(X_train.scaled, "scaled:center"),
scale = attr(X_train.scaled, "scaled:scale"))
dim(X_train.scaled)
predict_knn <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = 13)
print("Confusion Matrix of Log Regression Model")
confusionMatrix(data = as.factor(sonar_test$ypred_label), reference = y_test, positive = "R")
print("Confusion Matrix of KNN")
confusionMatrix(data = predict_knn, reference = y_test, positive = "R")
library(ROCR)
df_ <- data.frame("prediction" = predict_log,
"trueclass" = as.numeric(y_test == "R"))
df__roc <- prediction(df_$prediction, df_$trueclass)
plot(performance(df__roc, "tpr", "fpr"))
auc <- ROCR::performance(prediction.obj = df__roc, "auc")
auc@y.values[[1]]
library(MLmetrics)
oddK_idx <- sapply(1:(nrow(X_train)-1), function(x) {ifelse(x%%2 == 1, T, F)})
optK <- data.frame(1:(nrow(X_train)-1))[oddK_idx,]
optKNN <- data.frame(K = 1:length(optK), acc = 1:length(optK))
for (i in 1:length(optK)) {
predknn <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = optK[i])
optKNN$K[i] <- optK[i]
optKNN$acc[i] <- Accuracy(predknn, y_test)
}
maxAcc <- optKNN[optKNN$acc == max(optKNN$acc),]
label <- paste0(round(maxAcc$acc, 2), " when K = ", maxAcc$K)
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_label(data = maxAcc, aes(label = label), position = position_dodge(20), label.size = 0.05) +
labs(title = "No of K vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
maxAcc
optK
maxAcc$K
bestK <- maxAcc$K
predict_knn <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = bestK)
confusionMatrix(predict_knn, reference = y_test, positive = "R")
oddK_idx <- sapply(1:(nrow(X_train)-1), function(x) {ifelse(x%%2 == 1, T, F)})
optK <- data.frame(1:(nrow(X_train)-1))[oddK_idx,]
optKNN <- data.frame(K = 1:length(optK), acc = 1:length(optK))
for (i in 1:length(optK)) {
predknn <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = optK[i])
optKNN$K[i] <- optK[i]
optKNN$acc[i] <- Accuracy(predknn, y_test)
}
maxAcc <- optKNN[optKNN$acc == max(optKNN$acc),]
label <- paste0(round(maxAcc$acc, 2), " when K = ", maxAcc$K)
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_label(data = maxAcc, aes(label = label), position = position_dodge(20), label.size = 0.05) +
labs(title = "No of K vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
library(plotROC)
install.packages("plotROC")
library(plotROC)
df__roc %>% ggplot(aes(m = prediction, d = trueclass)) +
geom_roc(n.cuts=20,labels=FALSE)+
style_roc(theme = theme_grey) +
geom_rocci(fill="pink")
ggplot(df__roc, aes(m = prediction, d = trueclass)) +
geom_roc(n.cuts=20,labels=FALSE)+
style_roc(theme = theme_grey) +
geom_rocci(fill="pink")
df__roc
ggplot(df_, aes(m = prediction, d = trueclass)) +
geom_roc(n.cuts=20,labels=FALSE)+
style_roc(theme = theme_grey) +
geom_rocci(fill="pink")
ggplot(df_, aes(m = prediction, d = trueclass)) +
geom_roc(n.cuts=20,labels=FALSE)+
style_roc(theme = theme_grey)
ggplot(df_, aes(m = prediction, d = trueclass)) +
geom_roc(n.cuts=20,labels=FALSE) +
style_roc(theme = theme_grey) +
geom_rocci(fill="pink")
ggplot(df_, aes(m = prediction, d = trueclass)) +
geom_roc(n.cuts=20,labels=FALSE) +
style_roc(theme = theme_grey) +
geom_rocci(fill="pink") +
geom_abline(intercept = 0, slope = 1)
p <- plot(performance(df__roc, "tpr", "fpr"))
p
str(p)
plot(perf)
perf <- performance(df__roc, "tpr", "fpr")
plot(perf)
str(perf)
perf@x.values[[1]]
perf@x.values[[2]]
perf@alpha.values[[1]]
glimpse(perf)
perf@alpha.values[[1]]
rocDF <- data.frame(threshold = perf@alpha.values[[1]],
tpr = perf@y.values[[1]],
fpr = perf@x.values[[1]])
rocDF
rocDF <- data.frame(threshold = perf@alpha.values[[1]],
tpr = perf@y.values[[1]],
fpr = perf@x.values[[1]])
rocDF$threshold[1] <- 1
rocDF
rocDF <- data.frame(threshold = perf@alpha.values[[1]],
tpr = perf@y.values[[1]],
fpr = perf@x.values[[1]])
rocDF$threshold[1] <- 1
rocDF
options(scipen = 999)
options(scipen = 999)
rocDF <- data.frame(threshold = perf@alpha.values[[1]],
tpr = perf@y.values[[1]],
fpr = perf@x.values[[1]])
rocDF$threshold[1] <- 1
rocDF
plot(rocDF$fpr, rocDF$tpr)
rocDF %>% arrange(desc(tpr))
rocDF %>% arrange(desc(tpr)) %>% filter(fpr < 0.5)
rocDF %>% arrange(desc(tpr)) %>% filter(fpr < 0.4)
rocDF %>% arrange(desc(tpr)) %>% filter(fpr < 0.3)
df_ <- data.frame("prediction" = predict_log,
"trueclass" = as.numeric(y_test == "R"))
df__roc <- prediction(df_$prediction, df_$trueclass)
perf <- performance(df__roc, "tpr", "fpr")
plot(perf)
abline(intercept = 0, slope = 1)
library(ROCR)
df_ <- data.frame("prediction" = predict_log,
"trueclass" = as.numeric(y_test == "R"))
df__roc <- prediction(df_$prediction, df_$trueclass)
perf <- performance(df__roc, "tpr", "fpr")
options(scipen = 999)
rocDF <- data.frame(threshold = perf@alpha.values[[1]],
tpr = perf@y.values[[1]],
fpr = perf@x.values[[1]])
rocDF$threshold[1] <- 1
rocDF %>% arrange(desc(tpr)) %>% filter(fpr < 0.3)
rocDF[rocDF$threshold == 5,]
rocDF[rocDF$threshold >= 4.9 & rocDF$threshold <= 5.1,]
rocDF[rocDF$threshold >= 4.5 & rocDF$threshold <= 5.5,]
rocDF
rocDF[rocDF$threshold >= 0.49 & rocDF$threshold <= 0.51,]
rocDF[rocDF$threshold >= 0.47 & rocDF$threshold <= 0.53,]
rocDF[rocDF$threshold >= 0.45 & rocDF$threshold <= 0.55,]
rocDF[which.max(rocDF$tpr + rocDF$fpr), 1]
which.max(rocDF$tpr + rocDF$fpr)
rrocDF[42,1]
rocDF[42,]
rocDF
rocDF[which.max(rocDF$tpr) & which.min(rocDF$fpr), 1]
rocDF[which.max(rocDF$tpr) & which.min(rocDF$fpr),]
1 - rocDF$fpr
rocDF$spec <- 1 - rocDF$fpr
rocDF
rocDF[which.max(rocDF$tpr + rocDF$fpr),]
rocDF[which.max(rocDF$tpr + rocDF$spec),]
optThreshold <- rocDF[which.max(rocDF$tpr + rocDF$spec),1]
optThreshold
DF
DF[,energyInsignificant]
energyInsignificant <- c("energy8", "energy28", "energy32", "energy40", "energy60")
DF[,energyInsignificant]
DF[,-energyInsignificant]
DF[,-(energyInsignificant)]
DF %>% select(-energyInsignificant)
DF %>% select(-all_of(energyInsignificant))
sonar_train
sonar_train2 <- sonar_train %>% select(-all_of(energyInsignificant))
model_log2 <- glm(formula = type ~ ., data = sonar_train2, family = "binomial", maxit = 30)
summary(model_log2)
ggplot(df_, aes(m = prediction, d = trueclass)) +
geom_roc(n.cuts=20,labels=FALSE) +
style_roc(theme = theme_grey) +
geom_abline(intercept = 0, slope = 1)
ggplot(df_, aes(m = prediction, d = trueclass)) +
geom_roc(n.cuts=20,labels=FALSE) +
style_roc(theme = theme_grey) +
geom_abline(intercept = 0, slope = 1) +
labs(main = "Receiver operating characteristic curve",
x = "False positive rate",
y = "True positive rate")
df_
perf
perf <- performance(df__roc, "tpr", "fpr")
rocDF <- data.frame(threshold = perf@alpha.values[[1]],
tpr = perf@y.values[[1]],
fpr = perf@x.values[[1]])
ggplot(rocDF, aes(x = fpr, y = tpr)) +
geom_line(color = "blue") +
geom_point(color = "black") +
# geom_roc(n.cuts=20,labels=FALSE) +
# style_roc(theme = theme_grey) +
geom_abline(intercept = 0, slope = 1) +
labs(main = "Receiver operating characteristic curve",
x = "False positive rate",
y = "True positive rate")
ggplot(rocDF, aes(x = fpr, y = tpr)) +
geom_line(color = "blue") +
geom_point(color = "black") +
# geom_roc(n.cuts=20,labels=FALSE) +
# style_roc(theme = theme_grey) +
geom_abline(intercept = 0, slope = 1, type = "dot") +
labs(main = "Receiver operating characteristic curve",
x = "False positive rate",
y = "True positive rate")
ggplot(rocDF, aes(x = fpr, y = tpr)) +
geom_line(color = "blue") +
geom_point(color = "black") +
# geom_roc(n.cuts=20,labels=FALSE) +
# style_roc(theme = theme_grey) +
geom_abline(intercept = 0, slope = 1, linetype="dashed") +
labs(main = "Receiver operating characteristic curve",
x = "False positive rate",
y = "True positive rate")
ggplot(rocDF, aes(x = fpr, y = tpr)) +
geom_line(color = "blue") +
geom_point(color = "black") +
# geom_roc(n.cuts=20,labels=FALSE) +
# style_roc(theme = theme_grey) +
geom_abline(intercept = 0, slope = 1, linetype="dashed") +
labs(main = "Receiver operating characteristic curve",
x = "False positive rate",
y = "True positive rate",
intercept = "Reference")
ggplot(rocDF, aes(x = fpr, y = tpr)) +
geom_line(color = "blue") +
geom_point(color = "black") +
# geom_roc(n.cuts=20,labels=FALSE) +
# style_roc(theme = theme_grey) +
geom_abline(color = "gray", intercept = 0, slope = 1, linetype="dashed") +
labs(main = "Receiver operating characteristic curve",
x = "False positive rate",
y = "True positive rate",
intercept = "Reference")
ggplot(rocDF, aes(x = fpr, y = tpr)) +
geom_line(color = "blue") +
geom_point(color = "black") +
# geom_roc(n.cuts=20,labels=FALSE) +
# style_roc(theme = theme_grey) +
geom_abline(color = "grey", intercept = 0, slope = 1, linetype="dashed") +
labs(main = "Receiver operating characteristic curve",
x = "False positive rate",
y = "True positive rate",
intercept = "Reference")
ggplot(rocDF, aes(x = fpr, y = tpr)) +
geom_line(color = "blue") +
geom_point(color = "black") +
# geom_roc(n.cuts=20,labels=FALSE) +
# style_roc(theme = theme_grey) +
geom_abline(color = "grey", intercept = 0, slope = 1, linetype="dashed") +
labs(main = "Receiver operating characteristic curve",
x = "False positive rate",
y = "True positive rate",
color = "Reference")
ggplot(rocDF, aes(x = fpr, y = tpr)) +
geom_line(color = "blue") +
geom_point(color = "black") +
# geom_roc(n.cuts=20,labels=FALSE) +
# style_roc(theme = theme_grey) +
geom_abline(color = "grey", intercept = 0, slope = 1, linetype="dashed", show.legend = T) +
labs(main = "Receiver operating characteristic curve",
x = "False positive rate",
y = "True positive rate",
color = "Reference")
remove.packages("plotROC", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
predict_log2 <- predict(object = model_log2, newdata = sonar_test, type = "response")
sonar_test$ypred_prob2 <- predict_log2
sonar_test$ypred_label2 <- ifelse(sonar_test$ypred_prob2 > 0.5, "R", "M")
confusionMatrix(sonar_test$ypred_label2, sonar_test$type, positive = "R")
confusionMatrix(as.factor(sonar_test$ypred_label2), sonar_test$type, positive = "R")
options(scipen = 999)
df_ <- data.frame("prediction" = predict_log2,
"trueclass" = as.numeric(y_test == "R"))
df__roc <- prediction(df_$prediction, df_$trueclass)
perf <- performance(df__roc, "tpr", "fpr")
rocDF <- data.frame(threshold = perf@alpha.values[[1]],
tpr = perf@y.values[[1]],
fpr = perf@x.values[[1]])
ggplot(rocDF, aes(x = fpr, y = tpr)) +
geom_line(color = "blue") +
geom_point(color = "black") +
# geom_roc(n.cuts=20,labels=FALSE) +
# style_roc(theme = theme_grey) +
geom_abline(color = "grey", intercept = 0, slope = 1, linetype="dashed") +
labs(main = "Receiver operating characteristic curve",
x = "False positive rate",
y = "True positive rate")
rocDF
rocDF$threshold[1] <- 1
rocDF$spec <- 1 - rocDF$fpr # find specificity value by 1 - false positive rate
rocDF
rocDF[which.max(rocDF$tpr + rocDF$spec),] # get the best threshold by finding maximum true positive rate and maximum specificity
optThreshold <- rocDF[which.max(rocDF$tpr + rocDF$spec),1]
sonar_test$ypred_prob2b <- predict_log2
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b > optThreshold, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label3), sonar_test$type, positive = "R")
sonar_test$ypred_prob2b <- predict_log2
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b > optThreshold, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label2b), sonar_test$type, positive = "R")
sonar_test$ypred_prob2b <- predict_log2
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b >= optThreshold, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label2b), sonar_test$type, positive = "R")
rocDF[which.max(rocDF$tpr + rocDF$spec),] # get the best threshold by finding maximum true positive rate and maximum specificity
rocDF[which.max(rocDF$tpr),] # get the best threshold by finding maximum true positive rate and maximum specificity
rocDF
# show AUC value
auc <- ROCR::performance(prediction.obj = df__roc, "auc")
auc@y.values[[1]]
library(ROCR)
options(scipen = 999)
df_ <- data.frame("prediction" = predict_log,
"trueclass" = as.numeric(y_test == "R"))
df__roc <- prediction(df_$prediction, df_$trueclass)
perf <- performance(df__roc, "tpr", "fpr")
rocDF <- data.frame(threshold = perf@alpha.values[[1]],
tpr = perf@y.values[[1]],
fpr = perf@x.values[[1]])
ggplot(rocDF, aes(x = fpr, y = tpr)) +
geom_line(color = "blue") +
geom_point(color = "black") +
# geom_roc(n.cuts=20,labels=FALSE) +
# style_roc(theme = theme_grey) +
geom_abline(color = "grey", intercept = 0, slope = 1, linetype="dashed") +
labs(main = "Receiver operating characteristic curve",
x = "False positive rate",
y = "True positive rate")
# show AUC value
auc <- ROCR::performance(prediction.obj = df__roc, "auc")
auc@y.values[[1]]
options(scipen = 999)
df_ <- data.frame("prediction" = predict_log2,
"trueclass" = as.numeric(y_test == "R"))
df__roc <- prediction(df_$prediction, df_$trueclass)
perf <- performance(df__roc, "tpr", "fpr")
rocDF <- data.frame(threshold = perf@alpha.values[[1]],
tpr = perf@y.values[[1]],
fpr = perf@x.values[[1]])
ggplot(rocDF, aes(x = fpr, y = tpr)) +
geom_line(color = "blue") +
geom_point(color = "black") +
# geom_roc(n.cuts=20,labels=FALSE) +
# style_roc(theme = theme_grey) +
geom_abline(color = "grey", intercept = 0, slope = 1, linetype="dashed") +
labs(main = "Receiver operating characteristic curve",
x = "False positive rate",
y = "True positive rate")
rocDF$threshold[1] <- 1
rocDF$spec <- 1 - rocDF$fpr # find specificity value by 1 - false positive rate
rocDF[which.max(rocDF$tpr + rocDF$spec),] # get the best threshold by finding maximum true positive rate and maximum specificity
optThreshold <- rocDF[which.max(rocDF$tpr + rocDF$spec),1]
Accuracy(y_pred = sonar_test$ypred_label, y_true = sonar_test$type)
Accuracy(y_pred = sonar_test$ypred_label2, y_true = sonar_test$type)
Accuracy(y_pred = sonar_test$ypred_label2b, y_true = sonar_test$type)
Recall(y_pred = sonar_test$ypred_label, y_true = sonar_test$type, positive = "R")
Recall(y_pred = sonar_test$ypred_label2, y_true = sonar_test$type, positive = "R")
Recall(y_pred = sonar_test$ypred_label2b, y_true = sonar_test$type, positive = "R")
Precision(y_pred = sonar_test$ypred_label, y_true = sonar_test$type, positive = "R")
Precision(y_pred = sonar_test$ypred_label2, y_true = sonar_test$type, positive = "R")
Precision(y_pred = sonar_test$ypred_label2b, y_true = sonar_test$type, positive = "R")
optThreshold
optThreshold <- rocDF[which.max(rocDF$tpr ),1]
sonar_test$ypred_prob2b <- predict_log2
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b >= optThreshold, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label2b), sonar_test$type, positive = "R")
Accuracy(y_pred = sonar_test$ypred_label, y_true = sonar_test$type)
Accuracy(y_pred = sonar_test$ypred_label2, y_true = sonar_test$type)
Accuracy(y_pred = sonar_test$ypred_label2b, y_true = sonar_test$type)
Recall(y_pred = sonar_test$ypred_label, y_true = sonar_test$type, positive = "R")
Recall(y_pred = sonar_test$ypred_label2, y_true = sonar_test$type, positive = "R")
Recall(y_pred = sonar_test$ypred_label2b, y_true = sonar_test$type, positive = "R")
Precision(y_pred = sonar_test$ypred_label, y_true = sonar_test$type, positive = "R")
Precision(y_pred = sonar_test$ypred_label2, y_true = sonar_test$type, positive = "R")
Precision(y_pred = sonar_test$ypred_label2b, y_true = sonar_test$type, positive = "R")
optThreshold
sonar_test$ypred_prob2b <- predict_log2
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b >= 3.5, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label2b), sonar_test$type, positive = "R")
sonar_test$ypred_prob2b <- predict_log2
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b >= 3, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label2b), sonar_test$type, positive = "R")
sonar_test$ypred_prob2b <- predict_log2
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b >= 5, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label2b), sonar_test$type, positive = "R")
ypred_label2b
sonar_test$ypred_label2b
sonar_test$ypred_prob2b
predict_log2
ifelse(sonar_test$ypred_prob2b >= 5, "R", "M")
predict_log2
ifelse(sonar_test$ypred_prob2b > 5, "R", "M")
sonar_test$ypred_prob2b
ifelse(sonar_test$ypred_prob2b > 5, "R", "M")
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b > 5, "R", "M")
sonar_test$ypred_label2b
sonar_test
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b > 0.35, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label2b), sonar_test$type, positive = "R")
sonar_test$ypred_prob2b <- predict_log2
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b > 0.65, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label2b), sonar_test$type, positive = "R")
sonar_test$ypred_prob2b <- predict_log2
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b > 0.7, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label2b), sonar_test$type, positive = "R")
sonar_test$ypred_prob2b <- predict_log2
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b > 0.8, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label2b), sonar_test$type, positive = "R")
optThreshold <- rocDF[which.max(rocDF$tpr + rocDF$spec),1]
sonar_test$ypred_prob2b <- predict_log2
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b > optThreshold, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label2b), sonar_test$type, positive = "R")
rocDF$threshold[1] <- 1
rocDF$spec <- 1 - rocDF$fpr # find specificity value by 1 - false positive rate
rocDF[which.max(rocDF$tpr + rocDF$spec),] # get the best threshold by finding maximum true positive rate and maximum specificity
optThreshold <- rocDF[which.max(rocDF$tpr + rocDF$spec),1]
sonar_test$ypred_prob2b <- predict_log2
sonar_test$ypred_label2b <- ifelse(sonar_test$ypred_prob2b > optThreshold, "R", "M")
confusionMatrix(as.factor(sonar_test$ypred_label2b), sonar_test$type, positive = "R")
Accuracy(y_pred = sonar_test$ypred_label, y_true = sonar_test$type)
Accuracy(y_pred = sonar_test$ypred_label2, y_true = sonar_test$type)
Accuracy(y_pred = sonar_test$ypred_label2b, y_true = sonar_test$type)
Recall(y_pred = sonar_test$ypred_label, y_true = sonar_test$type, positive = "R")
Recall(y_pred = sonar_test$ypred_label2, y_true = sonar_test$type, positive = "R")
Recall(y_pred = sonar_test$ypred_label2b, y_true = sonar_test$type, positive = "R")
Recall(y_pred = sonar_test$ypred_label, y_true = sonar_test$type, positive = "R")
Recall(y_pred = sonar_test$ypred_label2, y_true = sonar_test$type, positive = "R")
Recall(y_pred = sonar_test$ypred_label2b, y_true = sonar_test$type, positive = "R")
Precision(y_pred = sonar_test$ypred_label, y_true = sonar_test$type, positive = "R")
Precision(y_pred = sonar_test$ypred_label2, y_true = sonar_test$type, positive = "R")
Precision(y_pred = sonar_test$ypred_label2b, y_true = sonar_test$type, positive = "R")
bestK <- maxAcc$K
predict_knn2 <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = bestK)
confusionMatrix(predict_knn2, reference = y_test, positive = "R")
Accuracy(y_pred = predict_knn, y_true = sonar_test$type)
Accuracy(y_pred = predict_knn2, y_true = sonar_test$type)
bestK <- maxAcc$K
predict_knn2 <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = bestK)
confusionMatrix(predict_knn2, reference = y_test, positive = "R")
oddK_idx <- sapply(1:(nrow(X_train)-1), function(x) {ifelse(x%%2 == 1, T, F)})
optK <- data.frame(1:(nrow(X_train)-1))[oddK_idx,]
optKNN <- data.frame(K = 1:length(optK), acc = 1:length(optK))
for (i in 1:length(optK)) {
predknn <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = optK[i])
optKNN$K[i] <- optK[i]
optKNN$acc[i] <- Accuracy(predknn, y_test)
}
maxAcc <- optKNN[optKNN$acc == max(optKNN$acc),]
label <- paste0(round(maxAcc$acc, 2), " when K = ", maxAcc$K)
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_label(data = maxAcc, aes(label = label), position = position_dodge(20), label.size = 0.05) +
labs(title = "No of K vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
bestK <- maxAcc$K
predict_knn2 <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = bestK)
confusionMatrix(predict_knn2, reference = y_test, positive = "R")
predict_knn2
Accuracy(y_pred = predict_knn, y_true = sonar_test$type)
Accuracy(y_pred = predict_knn2, y_true = sonar_test$type)
confusionMatrix(predict_knn2, reference = y_test, positive = "R")
Accuracy(y_pred = predict_knn, y_true = sonar_test$type)
Accuracy(y_pred = predict_knn, y_true = sonar_test$type)
Accuracy(y_pred = predict_knn2, y_true = sonar_test$type)
predict_knn <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = 13)
bestK <- maxAcc$K
predict_knn2 <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = bestK)
confusionMatrix(predict_knn2, reference = y_test, positive = "R")
Accuracy(y_pred = predict_knn, y_true = sonar_test$type)
Accuracy(y_pred = predict_knn2, y_true = sonar_test$type)
confusionMatrix(predict_knn, reference = y_test, positive = "R")
confusionMatrix(predict_knn2, reference = y_test, positive = "R")
Accuracy(y_pred = predict_knn, y_true = y_test)
Accuracy(y_pred = predict_knn2, y_true = y_test)
Recall(y_pred = predict_knn, y_true = y_test, positive = "R")
Recall(y_pred = predict_knn2, y_true = y_test, positive = "R")
Precision(y_pred = predict_knn, y_true = y_test, positive = "R")
Precision(y_pred = predict_knn2, y_true = y_test, positive = "R")
Accuracy(y_pred = sonar_test$ypred_label, y_true = sonar_test$type)
Accuracy(y_pred = sonar_test$ypred_label2, y_true = sonar_test$type)
Accuracy(y_pred = sonar_test$ypred_label2b, y_true = y_test)
confusionMatrix(as.factor(sonar_test$ypred_label2b), y_test, positive = "R")
predict_log5 <- predict(object = model_log2, newdata = sonar_train, type = "response")
predict_log5_label <- ifelse(predict_log5 > 0.5, "R", "M")
predict_log5_label
confusionMatrix(predict_log5_label, reference = sonar_test$type, positive = "R")
confusionMatrix(as.factpr(predict_log5_label), reference = sonar_test$type, positive = "R")
confusionMatrix(as.factor(predict_log5_label), reference = sonar_test$type, positive = "R")
confusionMatrix(as.factor(predict_log5_label), reference = sonar_train$type, positive = "R")
predict_log5 <- predict(object = model_log2, newdata = sonar_train2, type = "response")
predict_log5_label <- ifelse(predict_log5 > 0.5, "R", "M")
confusionMatrix(as.factor(predict_log5_label), reference = sonar_train2$type, positive = "R")
install.packages(c("callr", "cli", "dendextend", "devtools", "digest", "dplyr", "DT", "forecast", "ggformula", "ggpubr", "gplots", "knitr", "learnr", "lintr", "manipulateWidget", "modelr", "mvtnorm", "pbkrtest", "pkgcache", "plm", "plotly", "ps", "RcppArmadillo", "remotes", "renv", "repr", "RgoogleMaps", "rlang", "rstudioapi", "skimr", "sp", "spData", "SQUAREM", "stringi", "tinytex", "TSP", "uuid", "vctrs", "yaml"))
install.packages(c("callr", "cli", "dendextend", "devtools", "digest", "dplyr", "DT", "forecast", "ggformula", "ggpubr", "gplots", "knitr", "learnr", "lintr", "manipulateWidget", "modelr", "mvtnorm", "pbkrtest", "pkgcache", "plm", "plotly", "ps", "RcppArmadillo", "remotes", "renv", "repr", "RgoogleMaps", "rlang", "rstudioapi", "skimr", "sp", "spData", "SQUAREM", "stringi", "tinytex", "TSP", "uuid", "vctrs", "yaml"))
install.packages(c("callr", "cli", "dendextend", "devtools", "digest", "dplyr", "DT", "forecast", "ggformula", "ggpubr", "gplots", "knitr", "learnr", "lintr", "manipulateWidget", "modelr", "mvtnorm", "pbkrtest", "pkgcache", "plm", "plotly", "ps", "RcppArmadillo", "remotes", "renv", "repr", "RgoogleMaps", "rlang", "rstudioapi", "skimr", "sp", "spData", "SQUAREM", "stringi", "tinytex", "TSP", "uuid", "vctrs", "yaml"))
install.packages(c("callr", "cli", "dendextend", "devtools", "digest", "dplyr", "DT", "forecast", "ggformula", "ggpubr", "gplots", "knitr", "learnr", "lintr", "manipulateWidget", "modelr", "mvtnorm", "pbkrtest", "pkgcache", "plm", "plotly", "ps", "RcppArmadillo", "remotes", "renv", "repr", "RgoogleMaps", "rlang", "rstudioapi", "skimr", "sp", "spData", "SQUAREM", "stringi", "tinytex", "TSP", "uuid", "vctrs", "yaml"))
install.packages(c("callr", "cli", "dendextend", "devtools", "digest", "dplyr", "DT", "forecast", "ggformula", "ggpubr", "gplots", "knitr", "learnr", "lintr", "manipulateWidget", "modelr", "mvtnorm", "pbkrtest", "pkgcache", "plm", "plotly", "ps", "RcppArmadillo", "remotes", "renv", "repr", "RgoogleMaps", "rlang", "rstudioapi", "skimr", "sp", "spData", "SQUAREM", "stringi", "tinytex", "TSP", "uuid", "vctrs", "yaml"))
install.packages(c("callr", "cli", "dendextend", "devtools", "digest", "dplyr", "DT", "forecast", "ggformula", "ggpubr", "gplots", "knitr", "learnr", "lintr", "manipulateWidget", "modelr", "mvtnorm", "pbkrtest", "pkgcache", "plm", "plotly", "ps", "RcppArmadillo", "remotes", "renv", "repr", "RgoogleMaps", "rlang", "rstudioapi", "skimr", "sp", "spData", "SQUAREM", "stringi", "tinytex", "TSP", "uuid", "vctrs", "yaml"))
