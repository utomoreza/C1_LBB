labelMax <- paste0(round(maxAcc$acc, 2), " when K = ", maxAcc$K) # and label it
K13 <- optKNN[optKNN$K == 13,]
labelK13 <- "K = 13"
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 0.01) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# get all odd K values
oddK_idx <- sapply(1:(nrow(X_train)-1), function(x) {ifelse(x%%2 == 1, T, F)})
optK <- data.frame(1:(nrow(X_train)-1))[oddK_idx,]
optKNN <- data.frame(K = 1:length(optK), acc = 1:length(optK)) # create blank dataframe
# brute force to calculate every accuracy of all odd Ks
for (i in 1:length(optK)) {
predknn <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = optK[i])
optKNN$K[i] <- optK[i]
optKNN$acc[i] <- Accuracy(predknn, y_test)
}
maxAcc <- optKNN[optKNN$acc == max(optKNN$acc),] # find the one with max accuracy
labelMax <- paste0(round(maxAcc$acc, 2), " when K = ", maxAcc$K) # and label it
K13 <- optKNN[optKNN$K == 13,]
labelK13 <- "K = 13"
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 1) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# get all odd K values
oddK_idx <- sapply(1:(nrow(X_train)-1), function(x) {ifelse(x%%2 == 1, T, F)})
optK <- data.frame(1:(nrow(X_train)-1))[oddK_idx,]
optKNN <- data.frame(K = 1:length(optK), acc = 1:length(optK)) # create blank dataframe
# brute force to calculate every accuracy of all odd Ks
for (i in 1:length(optK)) {
predknn <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = optK[i])
optKNN$K[i] <- optK[i]
optKNN$acc[i] <- Accuracy(predknn, y_test)
}
maxAcc <- optKNN[optKNN$acc == max(optKNN$acc),] # find the one with max accuracy
labelMax <- paste0(round(maxAcc$acc, 2), " when K = ", maxAcc$K) # and label it
K13 <- optKNN[optKNN$K == 13,]
labelK13 <- "K = 13"
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 4) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# get all odd K values
oddK_idx <- sapply(1:(nrow(X_train)-1), function(x) {ifelse(x%%2 == 1, T, F)})
optK <- data.frame(1:(nrow(X_train)-1))[oddK_idx,]
optKNN <- data.frame(K = 1:length(optK), acc = 1:length(optK)) # create blank dataframe
# brute force to calculate every accuracy of all odd Ks
for (i in 1:length(optK)) {
predknn <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = optK[i])
optKNN$K[i] <- optK[i]
optKNN$acc[i] <- Accuracy(predknn, y_test)
}
maxAcc <- optKNN[optKNN$acc == max(optKNN$acc),] # find the one with max accuracy
labelMax <- paste0(round(maxAcc$acc, 2), " when K = ", maxAcc$K) # and label it
K13 <- optKNN[optKNN$K == 13,]
labelK13 <- "K = 13"
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 2) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# get all odd K values
oddK_idx <- sapply(1:(nrow(X_train)-1), function(x) {ifelse(x%%2 == 1, T, F)})
optK <- data.frame(1:(nrow(X_train)-1))[oddK_idx,]
optKNN <- data.frame(K = 1:length(optK), acc = 1:length(optK)) # create blank dataframe
# brute force to calculate every accuracy of all odd Ks
for (i in 1:length(optK)) {
predknn <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = optK[i])
optKNN$K[i] <- optK[i]
optKNN$acc[i] <- Accuracy(predknn, y_test)
}
maxAcc <- optKNN[optKNN$acc == max(optKNN$acc),] # find the one with max accuracy
labelMax <- paste0(round(maxAcc$acc, 2), " when K = ", maxAcc$K) # and label it
K13 <- optKNN[optKNN$K == 13,]
labelK13 <- "K = 13"
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 2, position = position_dodge(1)) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 2, position = position_dodge(50)) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 2, position = "stacked") +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 2, hjust = 10) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 2, hjust = 1) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 2, hjust = 3) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 2, hjust = 1.6) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 3, hjust = 1.6) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_label(data = maxAcc,
aes(label = labelMax),
position = position_dodge(20),
label.size = 0.05) +
geom_text(data = K13, aes(label = labelK13), size = 2.5, hjust = 1.4) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_text(data = maxAcc,
aes(label = labelMax),
hjust = -2,
size = 5) +
geom_text(data = K13, aes(label = labelK13), size = 2.5, hjust = 1.4) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_text(data = maxAcc,
aes(label = labelMax),
hjust = 1,
size = 3.5) +
geom_text(data = K13, aes(label = labelK13), size = 2.5, hjust = 1.4) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_text(data = maxAcc,
aes(label = labelMax),
hjust = 0,
size = 3.5) +
geom_text(data = K13, aes(label = labelK13), size = 2.5, hjust = 1.4) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_text(data = maxAcc,
aes(label = labelMax),
hjust = -0.5,
size = 3.5) +
geom_text(data = K13, aes(label = labelK13), size = 2.5, hjust = 1.4) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_text(data = maxAcc,
aes(label = labelMax),
hjust = -0.1,
size = 3.5) +
geom_text(data = K13, aes(label = labelK13), size = 2.5, hjust = 1.4) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
# get all odd K values
oddK_idx <- sapply(1:(nrow(X_train)-1), function(x) {ifelse(x%%2 == 1, T, F)})
optK <- data.frame(1:(nrow(X_train)-1))[oddK_idx,]
optKNN <- data.frame(K = 1:length(optK), acc = 1:length(optK)) # create blank dataframe
# brute force to calculate every accuracy of all odd Ks
for (i in 1:length(optK)) {
predknn <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = optK[i])
optKNN$K[i] <- optK[i]
optKNN$acc[i] <- Accuracy(predknn, y_test)
}
maxAcc <- optKNN[optKNN$acc == max(optKNN$acc),] # find the one with max accuracy
labelMax <- paste0(round(maxAcc$acc, 3), " when K = ", maxAcc$K) # and label it
K13 <- optKNN[optKNN$K == 13,]
labelK13 <- "K = 13"
# plot the results
optKNN %>% ggplot(aes(x = K,
y = acc)) +
geom_line(color = "blue") +
geom_point(data = maxAcc, aes(x = K,
y = acc)) +
geom_point(data = K13, aes(x = K,
y = acc)) +
geom_text(data = maxAcc,
aes(label = labelMax),
hjust = -0.1,
size = 3.5) +
geom_text(data = K13, aes(label = labelK13), size = 2.5, hjust = 1.4) +
labs(title = "No of Ks vs Accuracy in KNN prediction",
x = "Number of Ks",
y = "Accuracy")
KNNTable1 <- table(predict_knn, y_test, dnn = c("Prediction","Actual"))
KNNTable2 <- table(predict_knn2, y_test, dnn = c("Prediction","Actual"))
bestK <- maxAcc$K
predict_knn2 <- knn(train = X_train.scaled, test = X_test.scaled, cl = y_train, k = bestK)
confusionMatrix(predict_knn2, reference = y_test, positive = "R")
KNNTable1 <- table(predict_knn, y_test, dnn = c("Prediction","Actual"))
KNNTable2 <- table(predict_knn2, y_test, dnn = c("Prediction","Actual"))
Accuracy1 <- (KNNTable1[1,1] + KNNTable1[2,2])/nrow(sonar_test)
Accuracy2 <- (KNNTable2[1,1] + KNNTable2[2,2])/nrow(sonar_test)
Recall1 <- KNNTable1[2,2]/(KNNTable1[1,2] + KNNTable1[2,2])
Recall2 <- KNNTable2[2,2]/(KNNTable2[1,2] + KNNTable2[2,2])
Precision1 <- KNNTable1[2,2]/(KNNTable1[2,1] + KNNTable1[2,2])
Precision2 <- KNNTable2[2,2]/(KNNTable2[2,1] + KNNTable2[2,2])
finalResults.KNN <- data.frame("Model" = c("Initial KNN","Tuned KNN"),
"Accuracy" = c(Accuracy1, Accuracy2),
"Recall" = c(Recall1, Recall2),
"Precision" = c(Precision1, Precision2))
KNNTable1
KNNTable2
finalResults.KNN
KNNTable1 <- table(predict_knn, y_test, dnn = c("Prediction","Actual"))
KNNTable2 <- table(predict_knn2, y_test, dnn = c("Prediction","Actual"))
Accuracy1 <- (KNNTable1[1,1] + KNNTable1[2,2])/nrow(sonar_test)
Accuracy2 <- (KNNTable2[1,1] + KNNTable2[2,2])/nrow(sonar_test)
Recall1 <- KNNTable1[2,2]/(KNNTable1[1,2] + KNNTable1[2,2])
Recall2 <- KNNTable2[2,2]/(KNNTable2[1,2] + KNNTable2[2,2])
Precision1 <- KNNTable1[2,2]/(KNNTable1[2,1] + KNNTable1[2,2])
Precision2 <- KNNTable2[2,2]/(KNNTable2[2,1] + KNNTable2[2,2])
finalResults.KNN <- data.frame("Model" = c("Initial KNN","Tuned KNN"),
"Accuracy" = c(Accuracy1, Accuracy2),
"Recall" = c(Recall1, Recall2),
"Precision" = c(Precision1, Precision2))
print("Confusion matrix of the initial model")
KNNTable1
print("Confusion matrix of the tuned model")
KNNTable2
finalResults.KNN
KNNTable1 <- table(predict_knn, y_test, dnn = c("Prediction","Actual"))
KNNTable2 <- table(predict_knn2, y_test, dnn = c("Prediction","Actual"))
Accuracy1 <- (KNNTable1[1,1] + KNNTable1[2,2])/nrow(sonar_test)
Accuracy2 <- (KNNTable2[1,1] + KNNTable2[2,2])/nrow(sonar_test)
Recall1 <- KNNTable1[2,2]/(KNNTable1[1,2] + KNNTable1[2,2])
Recall2 <- KNNTable2[2,2]/(KNNTable2[1,2] + KNNTable2[2,2])
Precision1 <- KNNTable1[2,2]/(KNNTable1[2,1] + KNNTable1[2,2])
Precision2 <- KNNTable2[2,2]/(KNNTable2[2,1] + KNNTable2[2,2])
finalResults.KNN <- data.frame("Model" = c("Initial KNN","Tuned KNN"),
"Accuracy" = c(Accuracy1, Accuracy2),
"Recall" = c(Recall1, Recall2),
"Precision" = c(Precision1, Precision2))
print("Confusion matrix of the initial model")
KNNTable1
print(cat("\nConfusion matrix of the tuned model"))
KNNTable2
finalResults.KNN
KNNTable1 <- table(predict_knn, y_test, dnn = c("Prediction","Actual"))
KNNTable2 <- table(predict_knn2, y_test, dnn = c("Prediction","Actual"))
Accuracy1 <- (KNNTable1[1,1] + KNNTable1[2,2])/nrow(sonar_test)
Accuracy2 <- (KNNTable2[1,1] + KNNTable2[2,2])/nrow(sonar_test)
Recall1 <- KNNTable1[2,2]/(KNNTable1[1,2] + KNNTable1[2,2])
Recall2 <- KNNTable2[2,2]/(KNNTable2[1,2] + KNNTable2[2,2])
Precision1 <- KNNTable1[2,2]/(KNNTable1[2,1] + KNNTable1[2,2])
Precision2 <- KNNTable2[2,2]/(KNNTable2[2,1] + KNNTable2[2,2])
finalResults.KNN <- data.frame("Model" = c("Initial KNN","Tuned KNN"),
"Accuracy" = c(Accuracy1, Accuracy2),
"Recall" = c(Recall1, Recall2),
"Precision" = c(Precision1, Precision2))
print(cat("Confusion matrix of the initial model"))
KNNTable1
print(cat("\nConfusion matrix of the tuned model"))
KNNTable2
finalResults.KNN
cat("\nConfusion matrix of the tuned model")
KNNTable1 <- table(predict_knn, y_test, dnn = c("Prediction","Actual"))
KNNTable2 <- table(predict_knn2, y_test, dnn = c("Prediction","Actual"))
Accuracy1 <- (KNNTable1[1,1] + KNNTable1[2,2])/nrow(sonar_test)
Accuracy2 <- (KNNTable2[1,1] + KNNTable2[2,2])/nrow(sonar_test)
Recall1 <- KNNTable1[2,2]/(KNNTable1[1,2] + KNNTable1[2,2])
Recall2 <- KNNTable2[2,2]/(KNNTable2[1,2] + KNNTable2[2,2])
Precision1 <- KNNTable1[2,2]/(KNNTable1[2,1] + KNNTable1[2,2])
Precision2 <- KNNTable2[2,2]/(KNNTable2[2,1] + KNNTable2[2,2])
finalResults.KNN <- data.frame("Model" = c("Initial KNN","Tuned KNN"),
"Accuracy" = c(Accuracy1, Accuracy2),
"Recall" = c(Recall1, Recall2),
"Precision" = c(Precision1, Precision2))
print(cat("Confusion matrix of the initial model\n"))
KNNTable1
print(cat("\nConfusion matrix of the tuned model\n"))
KNNTable2
finalResults.KNN
print(cat("\nConfusion matrix of the tuned model\n"))
print(cat("\nConfusion matrix of the tuned model"))
KNNTable1 <- table(predict_knn, y_test, dnn = c("Prediction","Actual"))
KNNTable2 <- table(predict_knn2, y_test, dnn = c("Prediction","Actual"))
Accuracy1 <- (KNNTable1[1,1] + KNNTable1[2,2])/nrow(sonar_test)
Accuracy2 <- (KNNTable2[1,1] + KNNTable2[2,2])/nrow(sonar_test)
Recall1 <- KNNTable1[2,2]/(KNNTable1[1,2] + KNNTable1[2,2])
Recall2 <- KNNTable2[2,2]/(KNNTable2[1,2] + KNNTable2[2,2])
Precision1 <- KNNTable1[2,2]/(KNNTable1[2,1] + KNNTable1[2,2])
Precision2 <- KNNTable2[2,2]/(KNNTable2[2,1] + KNNTable2[2,2])
finalResults.KNN <- data.frame("Model" = c("Initial KNN","Tuned KNN"),
"Accuracy" = c(Accuracy1, Accuracy2),
"Recall" = c(Recall1, Recall2),
"Precision" = c(Precision1, Precision2))
cat("Confusion matrix of the initial model")
KNNTable1
cat("Confusion matrix of the tuned model")
KNNTable2
finalResults.KNN
KNNTable1 <- table(predict_knn, y_test, dnn = c("Prediction","Actual"))
KNNTable2 <- table(predict_knn2, y_test, dnn = c("Prediction","Actual"))
Accuracy1 <- (KNNTable1[1,1] + KNNTable1[2,2])/nrow(sonar_test)
Accuracy2 <- (KNNTable2[1,1] + KNNTable2[2,2])/nrow(sonar_test)
Recall1 <- KNNTable1[2,2]/(KNNTable1[1,2] + KNNTable1[2,2])
Recall2 <- KNNTable2[2,2]/(KNNTable2[1,2] + KNNTable2[2,2])
Precision1 <- KNNTable1[2,2]/(KNNTable1[2,1] + KNNTable1[2,2])
Precision2 <- KNNTable2[2,2]/(KNNTable2[2,1] + KNNTable2[2,2])
finalResults.KNN <- data.frame("Model" = c("Initial KNN","Tuned KNN"),
"Accuracy" = c(Accuracy1, Accuracy2),
"Recall" = c(Recall1, Recall2),
"Precision" = c(Precision1, Precision2))
cat("Confusion matrix of the initial model\n")
KNNTable1
cat("\nConfusion matrix of the tuned model\n")
KNNTable2
finalResults.KNN
finalResults.KNN
finalResults <- rbind(finalResults.LogRes[2,], finalResults.KNN[2,])
finalResults
finalResults <- rbind(finalResults.LogRes[2,], finalResults.KNN[2,])
rownames(finalResults) <- NULL
finalResults
cat("Confusion Matrix of the tuned log res model\n")
LogResTable2
cat("\nConfusion matrix of the tuned KNN model\n")
KNNTable2
